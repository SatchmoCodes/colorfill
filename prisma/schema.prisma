datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id String @id @default(cuid())

  username String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  password     Password?
  notes        Note[]
  Scores       Scores[]
  Boards       Boards[]
  ownerName    GameSession[] @relation("ownerName")
  opponentName GameSession[] @relation("opponentName")

  @@unique([id, username])
}

model Password {
  hash String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Note {
  id    String @id @default(cuid())
  title String
  body  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String
}

model Scores {
  id          String   @unique @default(cuid())
  score       Int
  completedAt DateTime @default(now())
  gamemode    String
  turnlog     String

  user     User   @relation(fields: [userId, userName], references: [id, username])
  userId   String
  userName String

  boards    Boards @relation(fields: [boardId, boardSize], references: [id, size])
  boardId   String
  boardSize String
}

model Boards {
  id String @unique @default(cuid())

  size      String
  boardData String
  createdAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id])
  userId String

  Scores      Scores[]
  GameSession GameSession[]

  @@id([id, size])
  @@unique([id, size, boardData])
}

model GameSession {
  id String @unique @default(cuid())

  ownerName    String
  opponentName String

  boards    Boards @relation(fields: [boardId, boardSize, boardData], references: [id, size, boardData])
  boardId   String
  boardSize String
  boardData String

  gameState     String
  boardState    String
  boardType     String
  gameType      String
  squareGrowth  String
  turn          String
  ownerScore    Int
  opponentScore Int
  turnLog       String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now())

  owner    User @relation("ownerName", fields: [ownerName], references: [username])
  opponent User @relation("opponentName", fields: [opponentName], references: [username])
}
